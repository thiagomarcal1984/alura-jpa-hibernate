Dois problemas do JDBC: produz um código muito verboso e alto acoplamento
com o banco de dados.

Dependências para o projeto no Maven:
    org.hibernate hibernate-entitymanager 5.4.27.Final
    com.h2database h2 1.4.200

Link sobre a estrutura do JPA: https://tomee.apache.org/jpa-concepts.html 

O arquivo persistence.xml precisa conter algumas propriedades para que a 
implementação do JPA se comunique com o banco. Algumas propriedades na 
persistence-unit (javax.persistence.jdbc):
    * driver;
    * url;
    * user;
    * password.

Algumas propriedades específicas do Hibernate dentro da tag persistence-unit:
    *   dialect
    *   show_sql
    *   format_sql
    *   hbm2ddl (NÃO CONFUNDA COM hbm2DLL, é hbm2dDL. Data Definition Language).
        Alguns valores:
            1) create: apaga o database e cria um do zero.
            2) create-drop: mesmo que create, mas depois apaga o database.
            3) update: só ACRESCENTA elementos ao database, se necessário.
            4) validate: só confirma se o database está igual à configuração.


Anotações do JPA dentro das classes de modelo:
    * Entity: informa que a classe deve ser gerenciada pela EntityManager.
    * Table: altera as propriedades da tabela no database.
    * Column: altera as propriedades da coluna da tabela.
    * Id: indica qual propriedade corresponde à primary key da tabela.
    * GeneratedValue: indica como uma coluna ID é gerada:
        1) IDENTITY: a partir da coluna de ID.
        2) SEQUENCE: a partir de uma sequência da tabela do database.
        3) TABLE: a partir de uma tabela do database.
        1) AUTO: geração automática

O Hibernate consegue localizar as classes Entity no projeto automaticamente.
MAS outras implementações do JPA podem não fazer o mesmo. Por isso, é 
necessário incluir as classes no arquivo persistence.xml (tags class dentro 
da tag persistence-unit).

Cuidado: usando Hibernate, ou você declara todas as classes Entity ou não 
declara nenhuma. Do contrário, o Hibernate só encontra as classes declaradas
dentro do persistence.xml.

Passos para persistir dados usando Hibernate:
    1)  Crie uma EntityManagerFactory com o método estático 
        Persistence.createEntityManagerFactory(String persitenceUnit). Esse 
        método usa como parâmetro o nome de uma das persistence-unit presentes
        no arquivo persistence.xml.

            EntityManagerFactory factory = Persistence
                    .createEntityManagerFactory("loja");

    2)  Crie uma EntityManager a partir do objeto EntityManagerFactory:
        EntityManager em = factory.createManagerFactory();

    3)  Inicie uma transação. Como a persistence-unit usa transações do tipo
        RESOURCE_LOCAL, é necessário iniciar e fechar as transações.

    4)  Use o método em.persist(objetoDaEntidade).

    5)  Feche a transação (em.getTransaction().commit()).

    6)  Libere os recursos:
            em.close();

LocalDate e LocalDateTime são classes novas do Java que podem ser usadas nas 
classes Entity. 

Tipos enumerados no Hibernate são salvos no banco de dados pelo número de 
ordem dos tipos enumerados, começando por 1. Exemplo:
    public enum Categoria {
        CELULARES, // 1 
        INFORMATICA, // 2
        LIVROS; // 3
    }

Para que o JPA não confunda os tipos caso a ordem deles seja modificada, anote
na propriedade do tipo enumerado com @Enumerated(EnumType.STRING). Desta forma,
o tipo enumerado será salvo como String, não como inteiro.


A entidade-pai deve conter tantas anotações @ManyToOne quantas forem as colunas
que forem chave estrangeira para as entidades-filhas.

O JPA NUNCA assume qual a cardinalidade que vai existir entre as propriedades
dos objetos Entity.


Ciclo de vida de uma Entity no Insert:
    *   Transient: nasce do construtor da entidade, mas o EntityManager não 
        gerencia. Quando o método persist() de EntityManager é chamado, ele 
        muda de estado para Managed.
    *   Managed: o EntityManager gerencia a entidade. Enquanto o EntityManager
        não for fechado, a entidade mantém o estado de Managed. As alterações 
        nas entidades serão salvas logo que os métodos flush ou commit forem
        chamados.
    *   Detached: depois que o EntityManager for fechado , ele passa para este 
        estado. O EntityManager não gerencia mais esta entidade.

Métodos do EntityManager:
    *   persist(objeto): cria uma instância Gerenciada e Persistente.
    *   .getTransaction().commit(): confirma as modificações no database.
    *   flush(): faz com que o estado das entidades seja sincronizado com o 
        database, mas sem a conclusão da transação (commit).
    *   close(): fecha o EntityManager gerenciado pela aplicação/desenvolvedor.
        Todas as entidades gerenciadas passam para o estado Detached.
    *   clear(): muda o estado das entidades gerenciadas para Detached.
    *   merge(objeto): muda o estado das entidades Detached para gerenciadas. 
        Porém, não é o objeto passado no parâmetro que se torna gerenciado, mas
        sim uma nova instancia da entidade com os mesmos valores da entidade 
        Detached.
    *   remove(objeto): muda o estado da instância para Removed e depois 
        a remove do EntityManager e do database.
    *   find(Classe, id): recupera pela classe e pelo id uma entidade managed.
    *   createQuery(jpqlString): retorna uma Query a partir de um JPQL.

Ao desenvolver entidades, elas precisam todas ter um construtor sem parâmetros.
Do contrário, o método merge pode falhar porque não tem esse construtor padrão.

Na Java Persistence Query Language (JPQL), a sintaxe de um select seria:
    "SELECT objeto FROM ClasseDaEntidade AS objeto";

A ResultList desta JPQL é obtida a partir do método getResultList(), que é
acessível a partir de uma query gerada pelo EntityManager (em.createQuery(q)).

Ao usar JPQL, não confunda as propriedades dos objetos do banco de dados (nomes
de tabelas, colunas etc.) com as propriedades das entidades (nomes de classe,
atributos etc.). A JPQL NÃO usa as propriedades usadas no database, mas sim nas
entidades. JPQL é uma linguagem orientada a objetos, não ao modelo relacional.

Na JPQL, o fornecimento de parâmetros é parecido com o do JDBC, mas ao invés de
usarmos uma interrogação, usamos um nome qualquer para o parâmetro precedido de
dois pontos:
    String jpql = "SELECT obj FROM Classe obj WHERE obj.nome = :meuParm";
        ou 
    String jpql = "SELECT obj FROM Classe obj WHERE obj.nome = ?1";

Para obter o ResultList filtrado com essa JPQL, use:
    TypedQuery<Classe> q = em.createQuery(jpql, Classe.class);
    
    q.setParameter("meuParm", nome); // Se o parâmetro for nomeado ou...
    q.setParameter(1, nome); // ...se o parâmetro for identificado por número.
    
    q.getResultList();

Para buscar dados de tabelas relacionadas, basta usar o acesso aos objetos 
referenciados pela classe consultada:

    String jpql = "SELECT p FROM Produto p WHERE p.categoria.nome = :nome";

Repare que o filtro é feito na Strign nome no objeto categoria que está dentro
do objeto p. É uma consulta sem uso de joins do SQL normal!
