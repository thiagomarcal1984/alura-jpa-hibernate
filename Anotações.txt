Dois problemas do JDBC: produz um código muito verboso e alto acoplamento
com o banco de dados.

Dependências para o projeto no Maven:
    org.hibernate hibernate-entitymanager 5.4.27.Final
    com.h2database h2 1.4.200

Link sobre a estrutura do JPA: https://tomee.apache.org/jpa-concepts.html 

O arquivo persistence.xml precisa conter algumas propriedades para que a 
implementação do JPA se comunique com o banco. Algumas propriedades na 
persistence-unit (javax.persistence.jdbc):
    * driver;
    * url;
    * user;
    * password.

Algumas propriedades específicas do Hibernate dentro da tag persistence-unit:
    *   dialect
    *   show_sql
    *   hbm2ddl (NÃO CONFUNDA COM hbm2DLL, é hbm2dDL. Data Definition Language).
        Alguns valores:
            1) create: apaga o database e cria um do zero.
            2) create-drop: mesmo que create, mas depois apaga o database.
            3) update: só ACRESCENTA elementos ao database, se necessário.
            4) validate: só confirma se o database está igual à configuração.


Anotações do JPA dentro das classes de modelo:
    * Entity: informa que a classe deve ser gerenciada pela EntityManager.
    * Table: altera as propriedades da tabela no database.
    * Column: altera as propriedades da coluna da tabela.
    * Id: indica qual propriedade corresponde à primary key da tabela.
    * GeneratedValue: indica como uma coluna ID é gerada:
        1) IDENTITY: a partir da coluna de ID.
        2) SEQUENCE: a partir de uma sequência da tabela do database.
        3) TABLE: a partir de uma tabela do database.
        1) AUTO: geração automática

O Hibernate consegue localizar as classes Entity no projeto automaticamente.
MAS outras implementações do JPA podem não fazer o mesmo. Por isso, é 
necessário incluir as classes no arquivo persistence.xml (tags class dentro 
da tag persistence-unit).

Cuidado: usando Hibernate, ou você declara todas as classes Entity ou não 
declara nenhuma. Do contrário, o Hibernate só encontra as classes declaradas
dentro do persistence.xml.

Passos para persistir dados usando Hibernate:
    1)  Crie uma EntityManagerFactory com o método estático 
        Persistence.createEntityManagerFactory(String persitenceUnit). Esse 
        método usa como parâmetro o nome de uma das persistence-unit presentes
        no arquivo persistence.xml.

            EntityManagerFactory factory = Persistence
                    .createEntityManagerFactory("loja");

    2)  Crie uma EntityManager a partir do objeto EntityManagerFactory:
        EntityManager em = factory.createManagerFactory();

    3)  Inicie uma transação. Como a persistence-unit usa transações do tipo
        RESOURCE_LOCAL, é necessário iniciar e fechar as transações.

    4)  Use o método em.persist(objetoDaEntidade).

    5)  Feche a transação (em.getTransaction().commit()).

    6)  Libere os recursos:
            em.close();
